---
- name: "Creating AWS resources"
  hosts: localhost
  become: false
  vars_files:
    - login.yml
  vars:
    region: "ap-south-1"
    project: "demo"
    env: "dev"
  tasks:
    - name: "SSH Key pair "
      amazon.aws.ec2_key:
        name: "{{ project }} - {{ env }}"
        access_key: "{{ access_key }}"
        secret_key: "{{ secret_key }}"
        region: "{{ region }}"
        state: present
      register: key
    - name: "keyfile"
      debug:
        var: key
    - name: "Saving Key"
      when: key.changed
      copy:
        content: "{{ key.key.private_key }}"
        dest: "{{ project }}-{{ env }}.pem"
        mode: 0400
    - name: "creating security group"
      amazon.aws.ec2_security_group:
        name: "{{ project }}-{{ env }}"
        description: "{{ project }}-{{ env }}"
        access_key: "{{ access_key }}"
        secret_key: "{{ secret_key }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
 
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
 
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
 
        tags:
          Name: "{{ project }}-{{ env }}"
          Project: "{{ project }}"
          Env: "{{ env }}"
      register: sg
 
    - name: "Creating an ec2 instance"
      amazon.aws.ec2_instance:
        access_key: "{{ access_key }}"
        secret_key: "{{ secret_key }}"
        region: "{{ region }}"
        name: "{{ project }}-{{ env }}-webserver"
        key_name: "{{ key.key.name }}"
        instance_type: t2.micro
        security_groups:
          - "{{ sg.group_id }}"
        image_id: ami-0e742cca61fb65051
        exact_count: 3
        tags:
          Project: "{{ project }}"
          Env: "{{ env }}"
    - name: "ec2 instance details"
      amazon.aws.ec2_instance_info:
        access_key: "{{ access_key }}"
        secret_key: "{{ secret_key }}"
        region: "{{ region }}"
        filters:
          "tag:Name": "{{ project }}-{{ env }}-webserver"
          "tag:Project": "{{ project }}"
          "tag:Env": "{{ env }}"
          instance-state-name: [ "running"]
      register: aws_details
 
    - name: "Creating Dynamic Inventory"
      add_host:
        groups: "web"
        hostname: "{{ item.public_ip_address  }}"
        ansible_ssh_user: "ec2-user"
        ansible_ssh_host: '{{ item.public_ip_address  }}'
        ansible_ssh_port: "22"
        ansible_ssh_private_key_file: "{{ project }}-{{ env }}.pem"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
      with_items: "{{ aws_details.instances }}"
 
- name: "Deploying Website"
  become: true
  hosts: web
  serial: 1
  vars:
    repo_url: "https://github.com/antony-a-n/aws-elb-site.git"
    owner: "apache"
    group: "apache"
    port: "80"
    domain: "web.antonyan.tech"
    health_check_delay: 50
    packges:
      - httpd
      - php
      - git
    clone_dir: "/var/git/"
  tasks:
    - name: "Package Installation"
      yum:
        name: "{{ packges }}"
        state: present
      notify:
        - apache-reload
 
    - name: "Creating httpd.conf file"
      template:
        src: ./httpd.conf.tmpl
        dest: /etc/httpd/conf/httpd.conf
        owner: "{{ owner }}"
        group: "{{ group }}"
      notify:
        - apache-reload
 
    - name: "Creating VirtualHost"
      template:
        src: "./virtual.conf.tmpl"
        dest: "/etc/httpd/conf.d/{{ domain }}.conf"
        owner: "{{ owner }}"
        group: "{{ group }}"
      notify:
        - apache-reload
 
    - name: "Creating DocRoot }"
      file:
        path: "/var/www/html/{{ domain }}"
        state: directory
        owner: "{{ owner }}"
        group: "{{ group }}"
 
    - name: "Creating Clone Directory {{ clone_dir }}"
      file:
        path: "{{ clone_dir }}"
        state: directory
 
    - name: "Cloning Website Contents "
      git:
        repo: "{{ repo_url }}"
        dest: "{{ clone_dir }}"
      register: clone_status
      notify:
        - apache-restart
 
    - name: "Copying Website Files "
      when: clone_status.changed
      copy:
        src: "{{ clone_dir }}"
        dest: "/var/www/html/{{domain}}"
        remote_src: true
      notify:
        - apache-restart
 
  handlers:
    - name: "apache-reload"
      service:
        name: httpd
        state: reloaded
        enabled: true
    - name: "apache-restart"
      service:
        name: httpd
        state: restarted
        enabled: true
